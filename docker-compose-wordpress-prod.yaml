version: '3.8'

# Services
services:

  # MariaDB Service
  db:
    # imagen de mariadb
    image: mariadb:11.0.2-jammy
    # nombre del contenedor
    container_name: wp-mariadb
    # variables de entorno
    environment:
      # contraseña de root
      MYSQL_ROOT_PASSWORD: root
      # nombre de la BBDD
      MYSQL_DATABASE: test
      # usuario de acceso a la BBDD
      MYSQL_USER: test
      # contraseña de acceso a ls BBD
      MYSQL_PASSWORD: test
    # Volumen con los datos de la BBDD
    volumes:
      - ./db-data:/var/lib/mysql

#  # phpMyAdmin Service
#  phpmyadmin:
#    # imagen de Phpmyadmin
#    image: phpmyadmin/phpmyadmin:latest
#    # nombre del contenedor
#    container_name: dev-phpmyadmin
#    # accedemos al puerto 8080 local (host) (izquierda)
#    # aunque el puerto del contenedor es el 80 (derecha)
#    # URL: http://localhost:8080
#    ports:
#      - 8081:80
#    # Variables de entorno
#    environment:
#      # definición del nombre del host(contenedor) de la BBDD
#      PMA_HOST: db
#    # Se arranca después del contenedor de la BBDD
#    depends_on:
#      - db
#  # PHP Service
  php:
    # pilla el fichero Dockerfile para crear la imagen
    build:
      context: .
      dockerfile: Dockerfile.wordpress
    # nombre del contenedor PHP
    container_name: wp-php
    # definición del volumen con el código PHP
    volumes:
      - './src:/var/www/html'
      - './logs/php-fpm:/var/www/logs'
      - './conf/php/php.ini:/usr/local/etc/php/php.ini'
      - './conf/php-fpm.conf:/usr/local/etc/php-fpm.d/www.conf'
    # dependencia del contenedor mariadb
    environment:
      # host de mysql
      MYSQL_HOST: ${MYSQL_HOST}
      # port de mysql
      MYSQL_PORT: ${MYSQL_PORT}
      # contraseña de root
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      # nombre de la BBDD
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      # usuario de acceso a la BBDD
      MYSQL_USER: ${MYSQL_USER}
      # contraseña de acceso a ls BBDD
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      # Título del sitio
      SITE_TITLE: ${SITE_TITLE}
      # Admin user
      ADMIN_USER: ${ADMIN_USER}
      # Admin password
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      # Admin email
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      # Language to Install
      WP_LANG: ${WP_LANG}
      # Site base url
      WP_SITEURL: ${WP_SITEURL}
    depends_on:
      - db

  # Nginx Service
  nginx:
    # pilla la última imagen de nginx
    image: nginx:latest
    # nombre del contenedor
    container_name: wp-nginx
    # user: "1000:1000"
    # ofrece en el puerto 80 en el host (izquierda)
    # y en este caso el 80 del contenedor (derecha)
    # url: http://localhost:80/ ó http://localhost
    ports:
      - 82:80
    networks:
      - deploy-nginx_nginx_network
      - default
    volumes:
      # Define el volumen con el código de PHP
      - './src:/var/www/html'
      - './logs/nginx:/var/log/nginx'
      # define el volumen con los ficheros de configuración
      # fichero nginx.conf (host) -> /etc/nginx/conf.d/nginx.conf (contenedor)
      - './conf/nginx-wordpress-prod:/etc/nginx/conf.d'
    # depende del servicio de PHP
    depends_on:
      - php
  # Varnish Container
  varnish:
    image: varnish:fresh
    depends_on:
      - nginx
    container_name: wp-varnish
    restart: always
    ports:
      - 81:80
    volumes:
      # if you want to check the logs
      # - ./logs/varnish:/var/log/
      - ./conf/varnish-wordpress/varnish-prod.vcl:/etc/varnish/default.vcl:ro
    # tmpfs:
      - ./logs/varnish:/var/lib/varnish:exec
    networks:
      - deploy-nginx_nginx_network
      - default


    environment:
      BACKENDS: "nginx"
      BACKENDS_PORT: 80
      BACKENDS_PROBE_ENABLED: "false"
    logging:
      options:
        max-size: 10m

networks:
  deploy-nginx_nginx_network:
    external: true



