# Elegimos la versión de PHP8.1 con Debian Bulleye como base
FROM php:8.1-fpm-bullseye
ARG UNAME=www-data
ARG UGROUP=www-data
ARG UID=1000
ARG GID=1000

RUN usermod  --uid $UID $UNAME
RUN groupmod --gid $GID $UGROUP

# Installing dependencies for the PHP modules
RUN apt-get update && \
apt-get install -y zip libzip-dev libpng-dev libfreetype-dev libjpeg62-turbo-dev unzip wget

# Installing initial PHP extensions
RUN docker-php-ext-install gd

RUN docker-php-ext-install mysqli pdo pdo_mysql gd zip

# Installing curl extension
RUN apt-get install -y libcurl4-openssl-dev

RUN docker-php-ext-install curl

# Installing xml extension
RUN apt-get install -y libxml2-dev

RUN docker-php-ext-install xml




## Installing xdebug extension
RUN pecl install xdebug \
    && docker-php-ext-enable xdebug

# Extensiones presentes:
# root@4ebc99e84da5:/var/www/html# php -m
# [PHP Modules]
  #Core
  #ctype
  #curl
  #date
  #dom
  #fileinfo
  #filter
  #ftp
  #gd
  #hash
  #iconv
  #json
  #libxml
  #mbstring
  #mysqli
  #mysqlnd
  #openssl
  #pcre
  #PDO
  #pdo_mysql
  #pdo_sqlite
  #Phar
  #posix
  #readline
  #Reflection
  #session
  #SimpleXML
  #sodium
  #SPL
  #sqlite3
  #standard
  #tokenizer
  #xdebug
  #xml
  #xmlreader
  #xmlwriter
  #zip
  #zlib
  #
  #[Zend Modules]
  #Xdebug


RUN docker-php-ext-install intl

RUN docker-php-ext-install soap

RUN docker-php-ext-install exif

RUN docker-php-ext-install opcache

RUN chmod 777 /var/www


# instalando composer
# Descargar e instalar Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

RUN export PATH=$PATH:/root/.composer/vendor/bin

# Install
RUN apt install curl vim elinks -y


# poner un php.ini de desarrollo
# RUN mv "$PHP_INI_DIR/php.ini-development" "$PHP_INI_DIR/php.ini"
# poner un php.ini de producción
# RUN mv "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"



# Instalación de NVM
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.4/install.sh | bash
WORKDIR /root
#RUN export NVM_DIR=$HOME/.nvm \
#    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" \
#    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Install wp-cli
RUN curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
RUN chmod +x wp-cli.phar
RUN mv wp-cli.phar /usr/local/bin/wp

WORKDIR /var/www/html

# Install mariadb-client
RUN apt install -y mariadb-client
# Download wp core
# RUN wp core download --locale=es_ES --allow-root



# Configura las variables de entorno para la base de datos y la instalación
ENV DB_NAME=mydb \
    DB_USER=root \
    DB_PASSWORD=root \
    DB_HOST=db \
    SITE_URL=http://localhost \
    SITE_TITLE="Mi Sitio WordPress" \
    ADMIN_USER=admin \
    ADMIN_PASSWORD=admin \
    ADMIN_EMAIL=admin@example.com

# Comandos a ejecutar
# RUN wp core config --dbname=$DB_NAME --dbuser=$DB_USER --dbpass=$DB_PASSWORD --dbhost=$DB_HOST
# RUN wp db create
# RUN wp core install --url=$SITE_URL --title="$SITE_TITLE" --admin_user=$ADMIN_USER --admin_password=$ADMIN_PASSWORD --admin_email=$ADMIN_EMAIL


#RUN source /root/.bashrc
# Instalación de NODEJS
#RUN nvm install 18
#RUN nvm use 18






